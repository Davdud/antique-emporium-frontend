{"version":3,"sources":["../../lib/atob.js","../../lib/index.js","components/Admin/Admin.js"],"names":["InvalidCharacterError","message","this","prototype","Error","name","window","atob","bind","InvalidTokenError","Admin","localStorage","getItem","JSON","parse","split","role","location","replace"],"mappings":"6HAOA,SAASA,EAAsBC,GAC3BC,KAAKD,QAAUA,E,+CAGnBD,EAAsBG,UAAY,IAAIC,MACtCJ,EAAsBG,UAAUE,KAAO,wBA6BL,oBAAXC,QACnBA,OAAOC,MACPD,OAAOC,KAAKC,KAAKF,QCvCd,SAASG,EAAkBR,GAC9BC,KAAKD,QAAUA,EAGnBQ,EAAkBN,UAAY,IAAIC,MAClCK,EAAkBN,UAAUE,KAAO,wB,OCPpB,SAASK,IACpB,GAAGC,aAAaC,QAAQ,UAAkF,SAAtEC,KAAKC,MAAMP,KAAKI,aAAaC,QAAQ,SAASG,MAAM,KAAK,KAAKC,KAClG,OACI,qCACA,+DACA,sEAIAV,OAAOW,SAASC,QAAQ","file":"static/js/17.b011a00c.chunk.js","sourcesContent":["/**\n * The code was extracted from:\n * https://github.com/davidchambers/Base64.js\n */\n\nvar chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\nfunction InvalidCharacterError(message) {\n    this.message = message;\n}\n\nInvalidCharacterError.prototype = new Error();\nInvalidCharacterError.prototype.name = \"InvalidCharacterError\";\n\nfunction polyfill(input) {\n    var str = String(input).replace(/=+$/, \"\");\n    if (str.length % 4 == 1) {\n        throw new InvalidCharacterError(\n            \"'atob' failed: The string to be decoded is not correctly encoded.\"\n        );\n    }\n    for (\n        // initialize result and counters\n        var bc = 0, bs, buffer, idx = 0, output = \"\";\n        // get next character\n        (buffer = str.charAt(idx++));\n        // character found in table? initialize bit storage and add its ascii value;\n        ~buffer &&\n        ((bs = bc % 4 ? bs * 64 + buffer : buffer),\n            // and if not first of each 4 characters,\n            // convert the first 8 bits to one ascii character\n            bc++ % 4) ?\n        (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6)))) :\n        0\n    ) {\n        // try to find character in table (0-63, not found => -1)\n        buffer = chars.indexOf(buffer);\n    }\n    return output;\n}\n\nexport default (typeof window !== \"undefined\" &&\n    window.atob &&\n    window.atob.bind(window)) ||\npolyfill;","\"use strict\";\n\nimport base64_url_decode from \"./base64_url_decode\";\n\nexport function InvalidTokenError(message) {\n    this.message = message;\n}\n\nInvalidTokenError.prototype = new Error();\nInvalidTokenError.prototype.name = \"InvalidTokenError\";\n\nexport default function(token, options) {\n    if (typeof token !== \"string\") {\n        throw new InvalidTokenError(\"Invalid token specified\");\n    }\n\n    options = options || {};\n    var pos = options.header === true ? 0 : 1;\n    try {\n        return JSON.parse(base64_url_decode(token.split(\".\")[pos]));\n    } catch (e) {\n        throw new InvalidTokenError(\"Invalid token specified: \" + e.message);\n    }\n}","import jwt_decode from \"jwt-decode\";\n\nexport default function Admin() {\n    if(localStorage.getItem('token') && JSON.parse(atob(localStorage.getItem('token').split('.')[1])).role == \"admin\") {\n    return (\n        <>\n        <h1>This is protected admin page!</h1>\n        <p>No one except admin can view it...</p>\n        </>\n        )\n    } else {\n        window.location.replace('/')\n    }\n}"],"sourceRoot":""}