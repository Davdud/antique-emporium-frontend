{"version":3,"sources":["components/Pay/components/form/index.js","components/Pay/components/card/index.js","components/Pay/Pay.js"],"names":["currentYear","Date","getFullYear","monthsArr","Array","from","length","x","i","month","yearsArr","_x","HtmlTooltip","withStyles","theme","tooltip","backgroundColor","color","maxWidth","fontSize","typography","pxToRem","border","Tooltip","CForm","cardMonth","cardYear","onUpdateState","cardNumberRef","cardHolderRef","cardDateRef","onCardInputFocus","onCardInputBlur","cardCvv","children","useState","cardNumber","setCardNumber","regex","React","name","values","setValues","handleFormChange","event","target","value","className","action","method","TransitionComponent","Zoom","arrow","title","interactive","placement","TextField","required","onlyAlphanumericRegex","type","id","label","inputProps","maxlength","variant","autoComplete","onChange","replace","test","trimRight","maxLength","ref","onFocus","e","onBlur","onKeyPress","key","preventDefault","htmlFor","disabled","map","val","index","Input","placeholder","CARDS","visa","amex","mastercard","discover","unionpay","troy","diners","BACKGROUND_IMG","random","Math","floor","cardBackgroundName","Card","cardHolder","isCardFlipped","currentFocusedElm","onCardElementClick","style","setStyle","useCardType","useMemo","re","number","Object","entries","card","pattern","RegExp","match","cardType","useEffect","element","current","width","offsetWidth","height","offsetHeight","transform","offsetLeft","offsetTop","alt","src","onClick","TransitionGroup","component","cardNumberArr","split","forEach","maskCardNumber","CSSTransition","classNames","timeout","SwitchTransition","in-out","out-in","toString","substr","initialState","MainScreen","state","setState","setCurrentFocusedElm","stripePromise","setStripePromise","a","stripe","loadStripe","retrievePublishableKey","updateStateValues","useCallback","keyName","formFieldsRefObj","useRef","cardDate","focusFormFieldByKey","focus","cardElementsRef","localStorage","getItem","_event","inputName","window","location"],"mappings":"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","file":"static/js/14.78929a0f.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\n\n//Material UI\nimport TextField from '@material-ui/core/TextField';\nimport Input from '@material-ui/core/Input';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Zoom from '@material-ui/core/Zoom';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\n\n//Stripe\nimport {\n    CardNumberElement,\n    CardExpiryElement,\n    CardCvcElement,\n} from \"@stripe/react-stripe-js\";\nimport StripeInput from '../StripeInput'\n\nconst currentYear = new Date().getFullYear();\nconst monthsArr = Array.from({ length: 12 }, (x, i) => {\n    const month = i + 1;\n    return month <= 9 ? '0' + month : month;\n});\nconst yearsArr = Array.from({ length: 9 }, (_x, i) => currentYear + i);\n\nconst HtmlTooltip = withStyles((theme) => ({\n    tooltip: {\n      backgroundColor: '#000000',\n      color: '#FFFFFF',\n      maxWidth: 220,\n      fontSize: theme.typography.pxToRem(12),\n      border: '1px solid #1b1e23',\n    },\n  }))(Tooltip);\n\nexport default function CForm({\n    cardMonth,\n    cardYear,\n    onUpdateState,\n    cardNumberRef,\n    cardHolderRef,\n    cardDateRef,\n    onCardInputFocus,\n    onCardInputBlur,\n    cardCvv,\n    children\n}) {\n    const [cardNumber, setCardNumber] = useState('');\n    const onlyAlphanumericRegex = /[^a-z0-9]/gi;\n    const regex = /^[a-zA-Z\\s]*$/;\n    const CHARACTER_LIMIT = 19;\n    const [values, setValues] = React.useState({\n      name: \"Hello\"\n    });\n\n    const handleFormChange = (event) => {\n        const { name, value } = event.target;\n        setValues({ ...values, [name]: event.target.value });\n        onUpdateState(name, value);\n    };\n\n    // TODO: We can improve the regex check with a better approach like in the card component.\n    const onCardNumberChange = (event) => {\n        let { value, name } = event.target;\n        let cardNumber = value;\n        value = value.replace(/\\D/g, '');\n        if (/^3[47]\\d{0,13}$/.test(value)) {\n            cardNumber = value\n                .replace(/(\\d{4})/, '$1 ')\n                .replace(/(\\d{4}) (\\d{6})/, '$1 $2 ');\n        } else if (/^3(?:0[0-5]|[68]\\d)\\d{0,11}$/.test(value)) {\n            // diner's club, 14 digits\n            cardNumber = value\n                .replace(/(\\d{4})/, '$1 ')\n                .replace(/(\\d{4}) (\\d{6})/, '$1 $2 ');\n        } else if (/^\\d{0,16}$/.test(value)) {\n            // regular cc number, 16 digits\n            cardNumber = value\n                .replace(/(\\d{4})/, '$1 ')\n                .replace(/(\\d{4}) (\\d{4})/, '$1 $2 ')\n                .replace(/(\\d{4}) (\\d{4}) (\\d{4})/, '$1 $2 $3 ');\n        }\n\n        setCardNumber(cardNumber.trimRight());\n        onUpdateState(name, cardNumber);\n    };\n\n    const onCvvFocus = (event) => {\n        onUpdateState('isCardFlipped', true);\n    };\n\n    const onCvvBlur = (event) => {\n        onUpdateState('isCardFlipped', false);\n    };\n\n    return (\n        \n        <div className=\"card-form\">\n            <div className=\"card-list\">{children}</div>\n            <div className=\"card-form__inner\">\n            <form action=\"https://www.paypal.com/cgi-bin/webscr\" method=\"post\">\n            <HtmlTooltip TransitionComponent={Zoom} arrow title=\"Any information entered here is not stored and is private\" interactive>\n            <h1>Please fill out your billing details:</h1>\n            </HtmlTooltip>\n                <div className=\"card-input\">\n                <Tooltip placement=\"right\" arrow title=\"Only accepts numbers\" interactive>\n                    <TextField\n                    required\n                    onlyAlphanumericRegex={true}\n                    type=\"tel\"\n                    id=\"outlined-basic\"\n                    label=\"Card Number\"\n                    inputProps={{\n                    maxlength: CHARACTER_LIMIT\n                    }}\n                    variant=\"outlined\"\n                    name=\"cardNumber\"\n                    className=\"card-input__input\"\n                    autoComplete=\"off\"\n                    onChange={onCardNumberChange}\n                    maxLength=\"19\"\n                    ref={cardNumberRef}\n                    onFocus={(e) => onCardInputFocus(e, 'cardNumber')}\n                    onBlur={onCardInputBlur}\n                    value={cardNumber}\n                     />\n              </Tooltip>\n                </div>\n                <div className=\"card-input\">\n                <Tooltip placement=\"right\" arrow title=\"Only accepts letters\" interactive>\n                    <TextField\n                    required\n                    type=\"text\"\n                    id=\"outlined-basic\"\n                    label=\"Card Holder\"\n                    variant=\"outlined\"\n                    className=\"card-input__input\"\n                    autoComplete=\"off\"\n                    name=\"cardHolder\"\n                    onChange={handleFormChange}\n                    ref={cardHolderRef}\n                    onFocus={(e) => onCardInputFocus(e, 'cardHolder')}\n                    onBlur={onCardInputBlur}\n                    inputProps={{\n                        maxlength: 25\n                      }}\n                      onKeyPress={(event) => {\n                        if (!regex.test(event.key)) {\n                          event.preventDefault();\n                        }\n                      }}/>\n                      </Tooltip>\n                </div>\n\n                <div className=\"card-form__row\">\n                    <div className=\"card-form__col\">\n                        <div className=\"card-form__group\">\n                            <label\n                                htmlFor=\"cardMonth\"\n                                className=\"card-input__label\"\n                            >\n                                Expiration Date\n                            </label>\n                            <select\n                                className=\"card-input__input -select\"\n                                value={cardMonth}\n                                name=\"cardMonth\"\n                                onChange={handleFormChange}\n                                ref={cardDateRef}\n                                onFocus={(e) => onCardInputFocus(e, 'cardDate')}\n                                onBlur={onCardInputBlur}\n                            >\n                                <option value=\"\" disabled>\n                                    Month\n                                </option>\n\n                                {monthsArr.map((val, index) => (\n                                    <option key={index} value={val}>\n                                        {val}\n                                    </option>\n                                ))}\n                            </select>\n                            <select\n                                name=\"cardYear\"\n                                className=\"card-input__input -select\"\n                                value={cardYear}\n                                onChange={handleFormChange}\n                                onFocus={(e) => onCardInputFocus(e, 'cardDate')}\n                                onBlur={onCardInputBlur}\n                            >\n                                <option value=\"\" disabled>\n                                    Year\n                                </option>\n\n                                {yearsArr.map((val, index) => (\n                                    <option key={index} value={val}>\n                                        {val}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n                    </div>\n                    <div className=\"card-form__col -cvv\">\n                    <label htmlFor=\"cardCVV\"\n                            className=\"card-input__label\">\n                                CVV\n                            </label>\n                        <div className=\"card-input\">\n                            <Input\n                            placeholder=\"CVV\"\n                            id=\"outlined-basic\"\n                            label=\"CVV\"\n                            variant=\"outlined\"\n                            onKeyPress={(event) => {\n                                if (!/[0-9]/.test(event.key)) {\n                                  event.preventDefault();\n                                }\n                              }}\n                                type=\"tel\"\n                                className=\"card-input__input\"\n                                inputProps={{\n                                    maxlength: 4\n                                  }}\n                                autoComplete=\"off\"\n                                name=\"cardCvv\"\n                                onChange={handleFormChange}\n                                onFocus={onCvvFocus}\n                                onBlur={onCvvBlur}\n                                ref={cardCvv}\n                            />\n                            <button type=\"submit\">Enter</button>\n                        </div>\n                    </div>\n                </div>\n                </form>\n            </div>\n        </div>\n    );\n}\n","import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport {\n    CSSTransition,\n    TransitionGroup,\n    SwitchTransition\n} from 'react-transition-group';\nimport './styles.scss';\n\nconst CARDS = {\n    visa: '^4',\n    amex: '^(34|37)',\n    mastercard: '^5[1-5]',\n    discover: '^6011',\n    unionpay: '^62',\n    troy: '^9792',\n    diners: '^(30[0-5]|36)'\n};\n\nconst cardBackgroundName = () => {\n    let random = Math.floor(Math.random() * 25 + 1);\n    return `${random}.jpeg`;\n};\n\nconst BACKGROUND_IMG = cardBackgroundName();\n\nconst Card = ({\n    cardHolder,\n    cardNumber,\n    cardMonth,\n    cardYear,\n    cardCvv,\n    isCardFlipped,\n    currentFocusedElm,\n    onCardElementClick,\n    cardNumberRef,\n    cardHolderRef,\n    cardDateRef\n}) => {\n    const [style, setStyle] = useState(null);\n\n    const cardType = (cardNumber) => {\n        const number = cardNumber;\n        let re;\n        for (const [card, pattern] of Object.entries(CARDS)) {\n            re = new RegExp(pattern);\n            if (number.match(re) != null) {\n                return card;\n            }\n        }\n\n        return 'visa'; // default type\n    };\n\n    const useCardType = useMemo(() => {\n        return cardType(cardNumber);\n    }, [cardNumber]);\n\n    const outlineElementStyle = (element) => {\n        return element\n            ? {\n                  width: `${element.offsetWidth}px`,\n                  height: `${element.offsetHeight}px`,\n                  transform: `translateX(${element.offsetLeft}px) translateY(${element.offsetTop}px)`\n              }\n            : null;\n    };\n\n    useEffect(() => {\n        if (currentFocusedElm) {\n            const style = outlineElementStyle(currentFocusedElm.current);\n            setStyle(style);\n        }\n    }, [currentFocusedElm]);\n\n    const maskCardNumber = (cardNumber) => {\n        let cardNumberArr = cardNumber.split('');\n        cardNumberArr.forEach((val, index) => {\n            if (index > 4 && index < 14) {\n                if (cardNumberArr[index] !== ' ') {\n                    cardNumberArr[index] = '*';\n                }\n            }\n        });\n\n        return cardNumberArr;\n    };\n\n    return (\n        <div className={'card-item ' + (isCardFlipped ? '-active' : '')}>\n            <div className=\"card-item__side -front\">\n                <div\n                    className={`card-item__focus ${\n                        currentFocusedElm ? `-active` : ``\n                    }`}\n                    style={style}\n                />\n                <div className=\"card-item__cover\">\n                    <img\n                        alt=\"\"\n                        src={`/card-background/${BACKGROUND_IMG}`}\n                        className=\"card-item__bg\"\n                    />\n                </div>\n\n                <div className=\"card-item__wrapper\">\n                    <div className=\"card-item__top\">\n                        <img\n                            src={'/chip.png'}\n                            alt=\"\"\n                            className=\"card-item__chip\"\n                        />\n                        <div className=\"card-item__type\">\n                            <img\n                                alt={useCardType}\n                                src={`/card-type/${useCardType}.png`}\n                                className=\"card-item__typeImg\"\n                            />\n                        </div>\n                    </div>\n\n                    <label\n                        className=\"card-item__number\"\n                        ref={cardNumberRef}\n                        onClick={() => onCardElementClick('cardNumber')}\n                    >\n                        <TransitionGroup\n                            className=\"slide-fade-up\"\n                            component=\"div\"\n                        >\n                            {cardNumber ? (\n                                maskCardNumber(cardNumber).map((val, index) => (\n                                    <CSSTransition\n                                        classNames=\"slide-fade-up\"\n                                        timeout={250}\n                                        key={index}\n                                    >\n                                        <div className=\"card-item__numberItem\">\n                                            {val}\n                                        </div>\n                                    </CSSTransition>\n                                ))\n                            ) : (\n                                <CSSTransition\n                                    classNames=\"slide-fade-up\"\n                                    timeout={250}\n                                >\n                                    <div className=\"card-item__numberItem\">\n                                        #\n                                    </div>\n                                </CSSTransition>\n                            )}\n                        </TransitionGroup>\n                    </label>\n                    <div className=\"card-item__content\">\n                        <label\n                            className=\"card-item__info\"\n                            onClick={() => onCardElementClick('cardHolder')}\n                            ref={cardHolderRef}\n                        >\n                            <div className=\"card-item__holder\">Card Holder</div>\n                            <div className=\"card-item__name\">\n                                <TransitionGroup\n                                    component=\"div\"\n                                    className=\"slide-fade-up\"\n                                >\n                                    {cardHolder === 'FULL NAME' ? (\n                                        <CSSTransition\n                                            classNames=\"slide-fade-up\"\n                                            timeout={250}\n                                        >\n                                            <div>FULL NAME</div>\n                                        </CSSTransition>\n                                    ) : (\n                                        cardHolder\n                                            .split('')\n                                            .map((val, index) => (\n                                                <CSSTransition\n                                                    timeout={250}\n                                                    classNames=\"slide-fade-right\"\n                                                    key={index}\n                                                >\n                                                    <span className=\"card-item__nameItem\">\n                                                        {val}\n                                                    </span>\n                                                </CSSTransition>\n                                            ))\n                                    )}\n                                </TransitionGroup>\n                            </div>\n                        </label>\n                        <div\n                            className=\"card-item__date\"\n                            onClick={() => onCardElementClick('cardDate')}\n                            ref={cardDateRef}\n                        >\n                            <label className=\"card-item__dateTitle\">\n                                Expires\n                            </label>\n                            <label className=\"card-item__dateItem\">\n                                <SwitchTransition in-out>\n                                    <CSSTransition\n                                        classNames=\"slide-fade-up\"\n                                        timeout={200}\n                                        key={cardMonth}\n                                    >\n                                        <span>\n                                            {!cardMonth ? 'MM' : cardMonth}{' '}\n                                        </span>\n                                    </CSSTransition>\n                                </SwitchTransition>\n                            </label>\n                            /\n                            <label\n                                htmlFor=\"cardYear\"\n                                className=\"card-item__dateItem\"\n                            >\n                                <SwitchTransition out-in>\n                                    <CSSTransition\n                                        classNames=\"slide-fade-up\"\n                                        timeout={250}\n                                        key={cardYear}\n                                    >\n                                        <span>\n                                            {!cardYear\n                                                ? 'YY'\n                                                : cardYear\n                                                      .toString()\n                                                      .substr(-2)}\n                                        </span>\n                                    </CSSTransition>\n                                </SwitchTransition>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"card-item__side -back\">\n                <div className=\"card-item__cover\">\n                    <img\n                        alt=\"\"\n                        src={`/card-background/${BACKGROUND_IMG}`}\n                        className=\"card-item__bg\"\n                    />\n                </div>\n                <div className=\"card-item__band\" />\n                <div className=\"card-item__cvv\">\n                    <div className=\"card-item__cvvTitle\">CVV</div>\n                    <div className=\"card-item__cvvBand\">\n                        <TransitionGroup>\n                            {cardCvv.split('').map((val, index) => (\n                                <CSSTransition\n                                    classNames=\"zoom-in-out\"\n                                    key={index}\n                                    timeout={250}\n                                >\n                                    <span>*</span>\n                                </CSSTransition>\n                            ))}\n                        </TransitionGroup>\n                    </div>\n                    <div className=\"card-item__type\">\n                        <img\n                            alt=\"card-type\"\n                            src={'/card-type/visa.png'}\n                            className=\"card-item__typeImg\"\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;\n","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Elements, } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from '@stripe/stripe-js';\nimport CForm from './components/form';\nimport Card from './components/card';\n\nconst initialState = {\n    cardNumber: '#### #### #### ####',\n    cardHolder: 'FULL NAME',\n    cardMonth: '',\n    cardYear: '',\n    cardCvv: '',\n    isCardFlipped: false\n};\n\nconst MainScreen = () => {\n    const [state, setState] = useState(initialState);\n    const [currentFocusedElm, setCurrentFocusedElm] = useState(null);\n\n    //Stripe\n    const STRIPE_PUBLIC_KEY = \"pk_test_51IGQq0I6UP1sMoBUZ9R2ncKJu6YZKT3OfO3wyO0HkGmSeDAT9lw2M6eyEc0ETNVnqrkhgK7uj7TOLdtpGmYgqYyt003SAN0Qe4\";\n    const [stripePromise, setStripePromise] = useState(null)\n\n    useEffect(() => {\n        const retrievePublishableKey = async () => {\n            const stripe = loadStripe(STRIPE_PUBLIC_KEY);\n            setStripePromise(stripe)\n        }\n        retrievePublishableKey()\n    }, [])\n\n    const updateStateValues = useCallback(\n        (keyName, value) => {\n            setState({\n                ...state,\n                [keyName]: value || initialState[keyName]\n            });\n        },\n        [state]\n    );\n\n    // References for the Form Inputs used to focus corresponding inputs.\n    let formFieldsRefObj = {\n        cardNumber: useRef(),\n        cardHolder: useRef(),\n        cardDate: useRef(),\n        cardCvv: useRef()\n    };\n\n    let focusFormFieldByKey = useCallback((key) => {\n        formFieldsRefObj[key].current.focus();\n    });\n\n    // This are the references for the Card DIV elements.\n    let cardElementsRef = {\n        cardNumber: useRef(),\n        cardHolder: useRef(),\n        cardDate: useRef()\n    };\n\n    let onCardFormInputFocus = (_event, inputName) => {\n        const refByName = cardElementsRef[inputName];\n        setCurrentFocusedElm(refByName);\n    };\n\n    let onCardInputBlur = useCallback(() => {\n        setCurrentFocusedElm(null);\n    }, []);\n\n    if(localStorage.getItem('token')) {\n    return (\n        <div className=\"wrapper\">\n            {stripePromise\n                    ? <Elements stripe={stripePromise}>\n                          <CForm\n                cardMonth={state.cardMonth}\n                cardYear={state.cardYear}\n                onUpdateState={updateStateValues}\n                cardNumberRef={formFieldsRefObj.cardNumber}\n                cardHolderRef={formFieldsRefObj.cardHolder}\n                cardDateRef={formFieldsRefObj.cardDate}\n                onCardInputFocus={onCardFormInputFocus}\n                onCardInputBlur={onCardInputBlur}>\n\n                <Card\n                    cardNumber={state.cardNumber}\n                    cardHolder={state.cardHolder}\n                    cardMonth={state.cardMonth}\n                    cardYear={state.cardYear}\n                    cardCvv={state.cardCvv}\n                    isCardFlipped={state.isCardFlipped}\n                    currentFocusedElm={currentFocusedElm}\n                    onCardElementClick={focusFormFieldByKey}\n                    cardNumberRef={cardElementsRef.cardNumber}\n                    cardHolderRef={cardElementsRef.cardHolder}\n                    cardDateRef={cardElementsRef.cardDate}\n                ></Card>  \n            </CForm>\n                    </Elements>\n                    : null\n                }\n    </div>\n        );\n    } else {\n        window.location.replace(\"/login\")\n    }\n};\n\nexport default MainScreen;\n"],"sourceRoot":""}