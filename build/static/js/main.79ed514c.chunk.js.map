{"version":3,"sources":["config/config.js","components/Signup/Signup.js","components/Upload/Upload.js","components/Login/Login.js","components/Shop/Shop.js","components/Pay/components/form/index.js","components/Pay/components/card/index.js","components/Pay/Pay.js","components/View/View.js","App.js","reportWebVitals.js","index.js"],"names":["URL","Signup","props","state","name","email","password","password2","submit","bind","event","this","setState","target","value","fetch","method","headers","body","JSON","stringify","then","res","json","data","alert","success","catch","error","console","className","Grid","container","spacing","alignItems","TextField","type","onChange","handleName","id","label","placeholder","multiline","required","item","handleEmail","autoComplete","handlePass","handlePass2","ref","onClick","Component","Upload","onSubmit","useStyles","makeStyles","theme","root","display","flexWrap","margin","withoutLabel","marginTop","textField","width","Login","prop","classes","React","useState","amount","weight","weightRange","showPassword","values","setValues","action","FormControl","clsx","InputLabel","htmlFor","Input","endAdornment","InputAdornment","position","IconButton","aria-label","onMouseDown","preventDefault","Shop","Products","setProducts","Skip","Limit","dataReturn","useEffect","getProducts","skip","limit","variables","log","renderCards","map","product","index","Date","date","toLocaleDateString","CardActionArea","alt","_id","src","imageUrl","effect","CardContent","Typography","gutterBottom","variant","component","once","color","description","CardActions","Button","href","length","style","height","justifyContent","currentYear","getFullYear","monthsArr","Array","from","x","i","month","yearsArr","_x","HtmlTooltip","withStyles","tooltip","backgroundColor","maxWidth","fontSize","typography","pxToRem","border","Tooltip","CForm","cardMonth","cardYear","onUpdateState","cardNumberRef","cardHolderRef","cardDateRef","onCardInputFocus","onCardInputBlur","cardCvv","children","cardNumber","setCardNumber","regex","handleFormChange","TransitionComponent","Zoom","arrow","title","interactive","placement","onlyAlphanumericRegex","inputProps","maxlength","replace","test","trimRight","maxLength","onFocus","e","onBlur","onKeyPress","key","disabled","val","CARDS","visa","amex","mastercard","discover","unionpay","troy","diners","BACKGROUND_IMG","random","Math","floor","cardBackgroundName","Card","cardHolder","isCardFlipped","currentFocusedElm","onCardElementClick","setStyle","useCardType","useMemo","re","number","Object","entries","card","pattern","RegExp","match","cardType","element","current","offsetWidth","offsetHeight","transform","offsetLeft","offsetTop","TransitionGroup","cardNumberArr","split","forEach","maskCardNumber","CSSTransition","classNames","timeout","SwitchTransition","in-out","out-in","toString","substr","initialState","MainScreen","setCurrentFocusedElm","stripePromise","setStripePromise","a","stripe","loadStripe","retrievePublishableKey","updateStateValues","useCallback","keyName","formFieldsRefObj","useRef","cardDate","focusFormFieldByKey","focus","cardElementsRef","_event","inputName","View","useParams","myData","setData","disableFocusListener","price","App","exact","path","Pay","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79ed514c.chunk.js","sourcesContent":["export default URL = 'https://antique-emporium-backend.herokuapp.com'","import React, { Component } from 'react';\nimport URL from '../../config/config';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport './Signup.css'\n// import NavBar from '../NavBar/Navbar'\n\nclass Signup extends Component {\n  state = {\n    name: '',\n    email: '',\n    password: '',\n    password2: ''\n  };\n\n  constructor(props) {\n    super(props);\n    this.submit = this.submit.bind(this);\n  }\n\n  handleName(event) {\n    this.setState({\n      name: event.target.value\n    })\n  }\n\n  handleEmail(event) {\n    this.setState({\n      email: event.target.value\n    })\n  }\n\n  handlePass(event) {\n    this.setState({\n      password: event.target.value\n    })\n  }\n\n  handlePass2(event) {\n    this.setState({\n      password2: event.target.value\n    })\n  }\n\n  submit() {\n    // this.refs.btn.setAttribute(\"disabled\", \"disabled\");\n    fetch(URL+'/signup', {\n      method: 'POST',\n      headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n          name: this.state.name,\n          email: this.state.email,\n          password: this.state.password,\n          password2: this.state.password2\n      })\n  }).then(function(res) {\n      return res.json()\n  }).then(function(data) {\n      alert(data.success)\n  }).catch(function(error) {\n      console.error(error)\n  })\n  }\n\n  render() {\n  return (\n    <>\n    {/* <NavBar /> */}\n    <div className=\"signup\">\n    <Grid container spacing={1} alignItems=\"flex-end\">\n      <TextField\n        type=\"text\"\n        onChange={this.handleName.bind(this)}\n          id=\"filled-textarea\"\n          label=\"Name:\"\n          placeholder=\"Name\"\n          multiline\n          required\n        />\n      {/* <input type=\"email\" onChange={this.handleEmail.bind(this)} placeholder=\"email\"></input> */}\n          <Grid item>\n            <AccountCircle />\n          </Grid>\n          <Grid item>\n          <TextField\n            type=\"email\"\n        onChange={this.handleEmail.bind(this)}\n        id=\"input-with-icon-grid\"\n          label=\"Email:\"\n          placeholder=\"Email\"\n          required\n        />\n          </Grid>\n\n      {/* <input type=\"password\" onChange={this.handlePass.bind(this)} placeholder=\"password1\"></input> */}\n        <TextField\n          id=\"filled-password-input\"\n          label=\"Password:\"\n          type=\"password\"\n          autoComplete=\"current-password\"\n          onChange={this.handlePass.bind(this)}\n          required\n          placeholder=\"Password\"\n        />\n\n      {/* <input type=\"password\" onChange={this.handlePass2.bind(this)} placeholder=\"password2\"></input> */}\n      <TextField\n          id=\"filled-password-input\"\n          label=\"Re-Enter Password:\"\n          type=\"password\"\n          autoComplete=\"current-password\"\n          onChange={this.handlePass2.bind(this)}\n          required\n          placeholder=\"Password\"\n        />\n      {/* <button type=\"submit\" onClick={this.submit}>Submit</button> */}\n      <div className=\"wrap\">\n  <button ref=\"btn\" onClick={this.submit} type=\"submit\" className=\"button\">Sign Up!</button>\n</div>\n      </Grid>\n    </div>\n    </>\n  );\n}\n}\nexport default Signup;","import React from 'react';\nimport './Upload.css';\n\nconst Upload = () => {\n    return (\n        <h1 className=\"header\">\n            <h1>Upload product</h1>\n\n            <form onSubmit>\n                <label>Title</label>\n                <input onChange type=\"text\"></input>\n                \n            </form>\n        </h1>\n    )\n}\n\nexport default Upload","import React, { Component } from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport Input from '@material-ui/core/Input';\nimport FilledInput from '@material-ui/core/FilledInput';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport Grid from '@material-ui/core/Grid';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport './Login.css'\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    margin: {\n      margin: theme.spacing(1),\n    },\n    withoutLabel: {\n      marginTop: theme.spacing(3),\n    },\n    textField: {\n      width: '25ch',\n    },\n  }));\n  \n\nfunction Login() {\n    const classes = useStyles();\n    const [values, setValues] = React.useState({\n      amount: '',\n      password: '',\n      weight: '',\n      weightRange: '',\n      showPassword: false,\n    });\n  \n    const handleChange = (prop) => (event) => {\n      setValues({ ...values, [prop]: event.target.value });\n    };\n  \n    const handleClickShowPassword = () => {\n      setValues({ ...values, showPassword: !values.showPassword });\n    };\n  \n    const handleMouseDownPassword = (event) => {\n      event.preventDefault();\n    };\n  return (\n      <form className=\"login\" method=\"POST\" action=\"https://antique-emporium-backend.herokuapp.com/login\">\n        <Grid container spacing={1} alignItems=\"flex-end\">\n          <Grid item>\n            <AccountCircle />\n          </Grid>\n          <Grid item>\n            <TextField type=\"email\" id=\"input-with-icon-grid\" label=\"Email:\" placeholder=\"Email\" required name=\"email\" />\n          </Grid>\n        </Grid>\n        <FormControl className={clsx(classes.margin, classes.textField)}>\n          <InputLabel htmlFor=\"standard-adornment-password\">Password:</InputLabel>\n          <Input\n          placeholder=\"Password\"\n          name=\"password\"\n          required\n            id=\"standard-adornment-password\"\n            type={values.showPassword ? 'text' : 'password'}\n            value={values.password}\n            onChange={handleChange('password')}\n            endAdornment={\n              <InputAdornment position=\"end\">\n                <IconButton\n                  aria-label=\"toggle password visibility\"\n                  onClick={handleClickShowPassword}\n                  onMouseDown={handleMouseDownPassword}\n                >\n                  {values.showPassword ? <Visibility /> : <VisibilityOff />}\n                </IconButton>\n              </InputAdornment>\n            }\n          />\n        </FormControl>\n\n      <div className=\"wrap\">\n  <button type=\"submit\" className=\"button\">Log in</button>\n</div>\n</form>\n  );\n}\nexport default Login;","import React, { useEffect, useState } from 'react';\nimport URL from '../../config/config'\n\n//Lazy Load\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport 'react-lazy-load-image-component/src/effects/blur.css';\nimport LazyLoad from 'react-lazyload';\n\n//Material Ui\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport './Shop.css'\n\nconst useStyles = makeStyles({\n    root: {\n      width: 320,\n    },\n  });\n  \n  const productionURL = 'http://localhost:5000/'\n\nfunction Shop() {\n    const [Products, setProducts] = useState([])\n    const [Skip, setSkip] = useState(0)\n    const [Limit, setLimit] = useState(4)\n    const classes = useStyles();\n    const onlyAlphanumericRegex = /[^a-z0-9]/gi;\n    let dataReturn = [];\n\nuseEffect(() => {\n        const variables = {\n            skip: Skip,\n            limit: Limit\n        }\n        getProducts(variables);\n}, [])\n\n    const getProducts = (variables) => {\n        fetch(URL+'/api/products', {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n        }, variables).then(function(res) {\n            return res.json()\n        }).then(function(data) {\n            dataReturn = data;\n            console.log(dataReturn)\n            setProducts(data)\n        }).catch(function(error) {\n            console.error(error)\n        })\n    }\n\n    const renderCards = Products.map((product, index) => {\n        var date = new Date(product.date);\n        var newDate = date.toLocaleDateString()\n\n        return <div className=\"item\">\n        <Card className={classes.root} key={product._id}>\n        <CardActionArea>\n        <LazyLoadImage\n                    alt={`${product._id}`}\n                    src={`${product.imageUrl}`}\n                    width={200}\n                    effect=\"blur\" />\n        <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {product.name}\n            </Typography>\n            <LazyLoad once={true} >\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            {product.description}\n            </Typography>\n            </LazyLoad>\n        </CardContent>\n        </CardActionArea>\n        <CardActions>\n        <Button variant=\"contained\" color=\"primary\" href={`http://localhost:5000/${product._id}`}>\n            View\n        </Button>\n        </CardActions>\n        </Card>\n        </div>\n    })\n\n    return (\n       <div className=\"shopping-page\">\n           <h1>Shop</h1>\n           {Products.length === 0 ?\n                <div style={{ display: 'flex', height: '300px', justifyContent: 'center', alignItems: 'center' }}>\n                    <h2>Loading...</h2>\n                </div> :\n                <div>\n                    <div className=\"container\">\n                        {Products.map((product, index) => {})}\n                        {renderCards}\n                        </div>\n                </div>\n            }\n            <br /><br />\n                <div style={{ display: 'flex', justifyContent: 'center' }}>\n                </div>\n       </div>\n    )\n}\n\nexport default Shop;","import React, { useEffect, useState, useRef } from 'react';\n\n//Material UI\nimport TextField from '@material-ui/core/TextField';\nimport Input from '@material-ui/core/Input';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Zoom from '@material-ui/core/Zoom';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\n\n//Stripe\nimport {\n    CardNumberElement,\n    CardExpiryElement,\n    CardCvcElement,\n} from \"@stripe/react-stripe-js\";\nimport StripeInput from '../StripeInput'\n\nconst currentYear = new Date().getFullYear();\nconst monthsArr = Array.from({ length: 12 }, (x, i) => {\n    const month = i + 1;\n    return month <= 9 ? '0' + month : month;\n});\nconst yearsArr = Array.from({ length: 9 }, (_x, i) => currentYear + i);\n\nconst HtmlTooltip = withStyles((theme) => ({\n    tooltip: {\n      backgroundColor: '#000000',\n      color: '#FFFFFF',\n      maxWidth: 220,\n      fontSize: theme.typography.pxToRem(12),\n      border: '1px solid #1b1e23',\n    },\n  }))(Tooltip);\n\nexport default function CForm({\n    cardMonth,\n    cardYear,\n    onUpdateState,\n    cardNumberRef,\n    cardHolderRef,\n    cardDateRef,\n    onCardInputFocus,\n    onCardInputBlur,\n    cardCvv,\n    children\n}) {\n    const [cardNumber, setCardNumber] = useState('');\n    const onlyAlphanumericRegex = /[^a-z0-9]/gi;\n    const regex = /^[a-zA-Z\\s]*$/\n    const CHARACTER_LIMIT = 19;\n    const [values, setValues] = React.useState({\n      name: \"Hello\"\n    });\n\n    const handleFormChange = (event) => {\n        const { name, value } = event.target;\n        setValues({ ...values, [name]: event.target.value });\n        onUpdateState(name, value);\n    };\n\n    // TODO: We can improve the regex check with a better approach like in the card component.\n    const onCardNumberChange = (event) => {\n        let { value, name } = event.target;\n        let cardNumber = value;\n        value = value.replace(/\\D/g, '');\n        if (/^3[47]\\d{0,13}$/.test(value)) {\n            cardNumber = value\n                .replace(/(\\d{4})/, '$1 ')\n                .replace(/(\\d{4}) (\\d{6})/, '$1 $2 ');\n        } else if (/^3(?:0[0-5]|[68]\\d)\\d{0,11}$/.test(value)) {\n            // diner's club, 14 digits\n            cardNumber = value\n                .replace(/(\\d{4})/, '$1 ')\n                .replace(/(\\d{4}) (\\d{6})/, '$1 $2 ');\n        } else if (/^\\d{0,16}$/.test(value)) {\n            // regular cc number, 16 digits\n            cardNumber = value\n                .replace(/(\\d{4})/, '$1 ')\n                .replace(/(\\d{4}) (\\d{4})/, '$1 $2 ')\n                .replace(/(\\d{4}) (\\d{4}) (\\d{4})/, '$1 $2 $3 ');\n        }\n\n        setCardNumber(cardNumber.trimRight());\n        onUpdateState(name, cardNumber);\n    };\n\n    const onCvvFocus = (event) => {\n        onUpdateState('isCardFlipped', true);\n    };\n\n    const onCvvBlur = (event) => {\n        onUpdateState('isCardFlipped', false);\n    };\n\n    return (\n        \n        <div className=\"card-form\">\n            <div className=\"card-list\">{children}</div>\n            <div className=\"card-form__inner\">\n            <form action=\"https://www.paypal.com/cgi-bin/webscr\" method=\"post\">\n            <HtmlTooltip TransitionComponent={Zoom} arrow title=\"Any information entered here is not stored and is private\" interactive>\n            <h1>Please fill out your billing details:</h1>\n            </HtmlTooltip>\n                <div className=\"card-input\">\n                <Tooltip placement=\"right\" arrow title=\"Only accepts numbers\" interactive>\n                    <TextField\n                    required\n                    onlyAlphanumericRegex={true}\n                    type=\"tel\"\n                    id=\"outlined-basic\"\n                    label=\"Card Number\"\n                    inputProps={{\n                    maxlength: CHARACTER_LIMIT\n                    }}\n                    variant=\"outlined\"\n                    name=\"cardNumber\"\n                    className=\"card-input__input\"\n                    autoComplete=\"off\"\n                    onChange={onCardNumberChange}\n                    maxLength=\"19\"\n                    ref={cardNumberRef}\n                    onFocus={(e) => onCardInputFocus(e, 'cardNumber')}\n                    onBlur={onCardInputBlur}\n                    value={cardNumber}\n                     />\n              </Tooltip>\n                </div>\n                <div className=\"card-input\">\n                <Tooltip placement=\"right\" arrow title=\"Only accepts letters\" interactive>\n                    <TextField\n                    required\n                    type=\"text\"\n                    id=\"outlined-basic\"\n                    label=\"Card Holder\"\n                    variant=\"outlined\"\n                    className=\"card-input__input\"\n                    autoComplete=\"off\"\n                    name=\"cardHolder\"\n                    onChange={handleFormChange}\n                    ref={cardHolderRef}\n                    onFocus={(e) => onCardInputFocus(e, 'cardHolder')}\n                    onBlur={onCardInputBlur}\n                    inputProps={{\n                        maxlength: 25\n                      }}\n                      onKeyPress={(event) => {\n                        if (!regex.test(event.key)) {\n                          event.preventDefault();\n                        }\n                      }}/>\n                      </Tooltip>\n                </div>\n\n                <div className=\"card-form__row\">\n                    <div className=\"card-form__col\">\n                        <div className=\"card-form__group\">\n                            <label\n                                htmlFor=\"cardMonth\"\n                                className=\"card-input__label\"\n                            >\n                                Expiration Date\n                            </label>\n                            <select\n                                className=\"card-input__input -select\"\n                                value={cardMonth}\n                                name=\"cardMonth\"\n                                onChange={handleFormChange}\n                                ref={cardDateRef}\n                                onFocus={(e) => onCardInputFocus(e, 'cardDate')}\n                                onBlur={onCardInputBlur}\n                            >\n                                <option value=\"\" disabled>\n                                    Month\n                                </option>\n\n                                {monthsArr.map((val, index) => (\n                                    <option key={index} value={val}>\n                                        {val}\n                                    </option>\n                                ))}\n                            </select>\n                            <select\n                                name=\"cardYear\"\n                                className=\"card-input__input -select\"\n                                value={cardYear}\n                                onChange={handleFormChange}\n                                onFocus={(e) => onCardInputFocus(e, 'cardDate')}\n                                onBlur={onCardInputBlur}\n                            >\n                                <option value=\"\" disabled>\n                                    Year\n                                </option>\n\n                                {yearsArr.map((val, index) => (\n                                    <option key={index} value={val}>\n                                        {val}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n                    </div>\n                    <div className=\"card-form__col -cvv\">\n                    <label htmlFor=\"cardCVV\"\n                            className=\"card-input__label\">\n                                CVV\n                            </label>\n                        <div className=\"card-input\">\n                            <Input\n                            placeholder=\"CVV\"\n                            id=\"outlined-basic\"\n                            label=\"CVV\"\n                            variant=\"outlined\"\n                            onKeyPress={(event) => {\n                                if (!/[0-9]/.test(event.key)) {\n                                  event.preventDefault();\n                                }\n                              }}\n                                type=\"tel\"\n                                className=\"card-input__input\"\n                                inputProps={{\n                                    maxlength: 4\n                                  }}\n                                autoComplete=\"off\"\n                                name=\"cardCvv\"\n                                onChange={handleFormChange}\n                                onFocus={onCvvFocus}\n                                onBlur={onCvvBlur}\n                                ref={cardCvv}\n                            />\n                            <button type=\"submit\">Enter</button>\n                        </div>\n                    </div>\n                </div>\n                </form>\n            </div>\n        </div>\n    );\n}\n","import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport {\n    CSSTransition,\n    TransitionGroup,\n    SwitchTransition\n} from 'react-transition-group';\nimport './styles.scss';\n\nconst CARDS = {\n    visa: '^4',\n    amex: '^(34|37)',\n    mastercard: '^5[1-5]',\n    discover: '^6011',\n    unionpay: '^62',\n    troy: '^9792',\n    diners: '^(30[0-5]|36)'\n};\n\nconst cardBackgroundName = () => {\n    let random = Math.floor(Math.random() * 25 + 1);\n    return `${random}.jpeg`;\n};\n\nconst BACKGROUND_IMG = cardBackgroundName();\n\nconst Card = ({\n    cardHolder,\n    cardNumber,\n    cardMonth,\n    cardYear,\n    cardCvv,\n    isCardFlipped,\n    currentFocusedElm,\n    onCardElementClick,\n    cardNumberRef,\n    cardHolderRef,\n    cardDateRef\n}) => {\n    const [style, setStyle] = useState(null);\n\n    const cardType = (cardNumber) => {\n        const number = cardNumber;\n        let re;\n        for (const [card, pattern] of Object.entries(CARDS)) {\n            re = new RegExp(pattern);\n            if (number.match(re) != null) {\n                return card;\n            }\n        }\n\n        return 'visa'; // default type\n    };\n\n    const useCardType = useMemo(() => {\n        return cardType(cardNumber);\n    }, [cardNumber]);\n\n    const outlineElementStyle = (element) => {\n        return element\n            ? {\n                  width: `${element.offsetWidth}px`,\n                  height: `${element.offsetHeight}px`,\n                  transform: `translateX(${element.offsetLeft}px) translateY(${element.offsetTop}px)`\n              }\n            : null;\n    };\n\n    useEffect(() => {\n        if (currentFocusedElm) {\n            const style = outlineElementStyle(currentFocusedElm.current);\n            setStyle(style);\n        }\n    }, [currentFocusedElm]);\n\n    const maskCardNumber = (cardNumber) => {\n        let cardNumberArr = cardNumber.split('');\n        cardNumberArr.forEach((val, index) => {\n            if (index > 4 && index < 14) {\n                if (cardNumberArr[index] !== ' ') {\n                    cardNumberArr[index] = '*';\n                }\n            }\n        });\n\n        return cardNumberArr;\n    };\n\n    return (\n        <div className={'card-item ' + (isCardFlipped ? '-active' : '')}>\n            <div className=\"card-item__side -front\">\n                <div\n                    className={`card-item__focus ${\n                        currentFocusedElm ? `-active` : ``\n                    }`}\n                    style={style}\n                />\n                <div className=\"card-item__cover\">\n                    <img\n                        alt=\"\"\n                        src={`/card-background/${BACKGROUND_IMG}`}\n                        className=\"card-item__bg\"\n                    />\n                </div>\n\n                <div className=\"card-item__wrapper\">\n                    <div className=\"card-item__top\">\n                        <img\n                            src={'/chip.png'}\n                            alt=\"\"\n                            className=\"card-item__chip\"\n                        />\n                        <div className=\"card-item__type\">\n                            <img\n                                alt={useCardType}\n                                src={`/card-type/${useCardType}.png`}\n                                className=\"card-item__typeImg\"\n                            />\n                        </div>\n                    </div>\n\n                    <label\n                        className=\"card-item__number\"\n                        ref={cardNumberRef}\n                        onClick={() => onCardElementClick('cardNumber')}\n                    >\n                        <TransitionGroup\n                            className=\"slide-fade-up\"\n                            component=\"div\"\n                        >\n                            {cardNumber ? (\n                                maskCardNumber(cardNumber).map((val, index) => (\n                                    <CSSTransition\n                                        classNames=\"slide-fade-up\"\n                                        timeout={250}\n                                        key={index}\n                                    >\n                                        <div className=\"card-item__numberItem\">\n                                            {val}\n                                        </div>\n                                    </CSSTransition>\n                                ))\n                            ) : (\n                                <CSSTransition\n                                    classNames=\"slide-fade-up\"\n                                    timeout={250}\n                                >\n                                    <div className=\"card-item__numberItem\">\n                                        #\n                                    </div>\n                                </CSSTransition>\n                            )}\n                        </TransitionGroup>\n                    </label>\n                    <div className=\"card-item__content\">\n                        <label\n                            className=\"card-item__info\"\n                            onClick={() => onCardElementClick('cardHolder')}\n                            ref={cardHolderRef}\n                        >\n                            <div className=\"card-item__holder\">Card Holder</div>\n                            <div className=\"card-item__name\">\n                                <TransitionGroup\n                                    component=\"div\"\n                                    className=\"slide-fade-up\"\n                                >\n                                    {cardHolder === 'FULL NAME' ? (\n                                        <CSSTransition\n                                            classNames=\"slide-fade-up\"\n                                            timeout={250}\n                                        >\n                                            <div>FULL NAME</div>\n                                        </CSSTransition>\n                                    ) : (\n                                        cardHolder\n                                            .split('')\n                                            .map((val, index) => (\n                                                <CSSTransition\n                                                    timeout={250}\n                                                    classNames=\"slide-fade-right\"\n                                                    key={index}\n                                                >\n                                                    <span className=\"card-item__nameItem\">\n                                                        {val}\n                                                    </span>\n                                                </CSSTransition>\n                                            ))\n                                    )}\n                                </TransitionGroup>\n                            </div>\n                        </label>\n                        <div\n                            className=\"card-item__date\"\n                            onClick={() => onCardElementClick('cardDate')}\n                            ref={cardDateRef}\n                        >\n                            <label className=\"card-item__dateTitle\">\n                                Expires\n                            </label>\n                            <label className=\"card-item__dateItem\">\n                                <SwitchTransition in-out>\n                                    <CSSTransition\n                                        classNames=\"slide-fade-up\"\n                                        timeout={200}\n                                        key={cardMonth}\n                                    >\n                                        <span>\n                                            {!cardMonth ? 'MM' : cardMonth}{' '}\n                                        </span>\n                                    </CSSTransition>\n                                </SwitchTransition>\n                            </label>\n                            /\n                            <label\n                                htmlFor=\"cardYear\"\n                                className=\"card-item__dateItem\"\n                            >\n                                <SwitchTransition out-in>\n                                    <CSSTransition\n                                        classNames=\"slide-fade-up\"\n                                        timeout={250}\n                                        key={cardYear}\n                                    >\n                                        <span>\n                                            {!cardYear\n                                                ? 'YY'\n                                                : cardYear\n                                                      .toString()\n                                                      .substr(-2)}\n                                        </span>\n                                    </CSSTransition>\n                                </SwitchTransition>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"card-item__side -back\">\n                <div className=\"card-item__cover\">\n                    <img\n                        alt=\"\"\n                        src={`/card-background/${BACKGROUND_IMG}`}\n                        className=\"card-item__bg\"\n                    />\n                </div>\n                <div className=\"card-item__band\" />\n                <div className=\"card-item__cvv\">\n                    <div className=\"card-item__cvvTitle\">CVV</div>\n                    <div className=\"card-item__cvvBand\">\n                        <TransitionGroup>\n                            {cardCvv.split('').map((val, index) => (\n                                <CSSTransition\n                                    classNames=\"zoom-in-out\"\n                                    key={index}\n                                    timeout={250}\n                                >\n                                    <span>*</span>\n                                </CSSTransition>\n                            ))}\n                        </TransitionGroup>\n                    </div>\n                    <div className=\"card-item__type\">\n                        <img\n                            alt=\"card-type\"\n                            src={'/card-type/visa.png'}\n                            className=\"card-item__typeImg\"\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;\n","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Elements, } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from '@stripe/stripe-js';\nimport CForm from './components/form';\nimport Card from './components/card';\n\nconst initialState = {\n    cardNumber: '#### #### #### ####',\n    cardHolder: 'FULL NAME',\n    cardMonth: '',\n    cardYear: '',\n    cardCvv: '',\n    isCardFlipped: false\n};\n\nconst MainScreen = () => {\n    const [state, setState] = useState(initialState);\n    const [currentFocusedElm, setCurrentFocusedElm] = useState(null);\n\n    //Stripe\n    const STRIPE_PUBLIC_KEY = \"pk_test_51IGQq0I6UP1sMoBUZ9R2ncKJu6YZKT3OfO3wyO0HkGmSeDAT9lw2M6eyEc0ETNVnqrkhgK7uj7TOLdtpGmYgqYyt003SAN0Qe4\";\n    const [stripePromise, setStripePromise] = useState(null)\n\n    useEffect(() => {\n        const retrievePublishableKey = async () => {\n            const stripe = loadStripe(STRIPE_PUBLIC_KEY);\n            setStripePromise(stripe)\n        }\n        retrievePublishableKey()\n    }, [])\n\n    const updateStateValues = useCallback(\n        (keyName, value) => {\n            setState({\n                ...state,\n                [keyName]: value || initialState[keyName]\n            });\n        },\n        [state]\n    );\n\n    // References for the Form Inputs used to focus corresponding inputs.\n    let formFieldsRefObj = {\n        cardNumber: useRef(),\n        cardHolder: useRef(),\n        cardDate: useRef(),\n        cardCvv: useRef()\n    };\n\n    let focusFormFieldByKey = useCallback((key) => {\n        formFieldsRefObj[key].current.focus();\n    });\n\n    // This are the references for the Card DIV elements.\n    let cardElementsRef = {\n        cardNumber: useRef(),\n        cardHolder: useRef(),\n        cardDate: useRef()\n    };\n\n    let onCardFormInputFocus = (_event, inputName) => {\n        const refByName = cardElementsRef[inputName];\n        setCurrentFocusedElm(refByName);\n    };\n\n    let onCardInputBlur = useCallback(() => {\n        setCurrentFocusedElm(null);\n    }, []);\n\n    return (\n        <div className=\"wrapper\">\n            {stripePromise\n                    ? <Elements stripe={stripePromise}>\n                          <CForm\n                cardMonth={state.cardMonth}\n                cardYear={state.cardYear}\n                onUpdateState={updateStateValues}\n                cardNumberRef={formFieldsRefObj.cardNumber}\n                cardHolderRef={formFieldsRefObj.cardHolder}\n                cardDateRef={formFieldsRefObj.cardDate}\n                onCardInputFocus={onCardFormInputFocus}\n                onCardInputBlur={onCardInputBlur}>\n\n                <Card\n                    cardNumber={state.cardNumber}\n                    cardHolder={state.cardHolder}\n                    cardMonth={state.cardMonth}\n                    cardYear={state.cardYear}\n                    cardCvv={state.cardCvv}\n                    isCardFlipped={state.isCardFlipped}\n                    currentFocusedElm={currentFocusedElm}\n                    onCardElementClick={focusFormFieldByKey}\n                    cardNumberRef={cardElementsRef.cardNumber}\n                    cardHolderRef={cardElementsRef.cardHolder}\n                    cardDateRef={cardElementsRef.cardDate}\n                ></Card>  \n            </CForm>\n                    </Elements>\n                    : null\n                }\n    </div>\n    );\n};\n\nexport default MainScreen;\n","import React, { useEffect, useState } from 'react';\nimport URL from '../../config/config'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useParams\n  } from \"react-router-dom\";\n\n\n//Material UI\nimport Grid from '@material-ui/core/Grid';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\n\nexport default function View() {\n    let { id } = useParams();\n    const [myData, setData] = useState({});\n\n    useEffect(() => {\n        getProducts();\n}, [])\n\n    const getProducts = (variables) => {\n        fetch(URL+'/api/'+id, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n        }).then(function(res) {\n            return res.json()\n        }).then(function(data) {\n            setData(data)\n        }).catch(function(error) {\n            console.error(error)\n        })\n    }\n    \n    return (\n        <div>\n            <Tooltip\n            disableFocusListener\n            interactive\n            placement=\"bottom-start\"\n            title={`Product ID: ${myData._id}`}>\n        <h1>{myData.name}</h1>\n        </Tooltip>\n          <p>{myData.price}</p>\n        </div>\n    )\n}","import './App.scss';\nimport React, { Component, Suspense } from 'react';\nimport Signup from './components/Signup/Signup';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Upload from './components/Upload/Upload';\nimport Login from './components/Login/Login';\n// import NavBar from './components/NavBar/Navbar';\nimport Shop from './components/Shop/Shop';\nimport Pay from './components/Pay/Pay';\nimport View from './components/View/View';\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n    <Router>\n      <Switch>\n        <Route exact path=\"/signup\" component={Signup} />\n        <Route exact path=\"/shop\" component={Shop} />\n        <Route exact path=\"/login\" component={Login} />\n        <Route exact path=\"/upload\" component={Upload} />\n        <Route exact path=\"/pay\" component={Pay} />\n        <Route exact path=\"/:id\" name=\"id\" component={View}/>\n        </Switch>\n    </Router>\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}